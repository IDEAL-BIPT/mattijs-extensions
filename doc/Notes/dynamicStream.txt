Note: the Ostream& gets the format of the input file so if this was binary
      you need to write in binary as well and this probably does not work
      (binary reading of dictionary .. ; v.s. ascii dictionary with binary
       entries ???)

Example: random internal field:

    //internalField   uniform (20 0 0);
    internalField   #codeStream
    {
        codeInclude
        #{
            #include "fvCFD.H"
        #};

        code
        #{
            const IOdictionary& d = dynamicCast<const IOdictionary>(dict);
            const fvMesh& mesh = refCast<const fvMesh>(d.db());
            vectorField fld(mesh.nCells(), vector::zero);

            Random rndGen(0);
            forAll(fld, cellI)
            {
                fld[cellI] = 100*(rndGen.vector01()-vector(0.5, 0.5, 0.5));
            }
            //fld.writeEntry("", Pout);
            fld.writeEntry("", os);
        #};

        codeOptions
        #{
            -I$(LIB_SRC)/meshTools/lnInclude \
            -I$(LIB_SRC)/finiteVolume/lnInclude
        #};

        codeLibs
        #{
            -lfiniteVolume
        #};
    };


Example: write field with processor number

functions
{
    procID
    {
        // Load the library containing the 'coded' functionObject
        functionObjectLibs ("libutilityFunctionObjects.so");
        type coded;
        // Name of on-the-fly generated functionObject
        redirectType myProcNo;
        codeWrite
        #{
            volScalarField procID
            (
                IOobject
                (
                    "procID",
                    mesh().time().timeName(),
                    mesh(),
                    IOobject::NO_READ,
                    IOobject::AUTO_WRITE,
                    false
                ),
                mesh(),
                dimensionedScalar("procID", dimless, Pstream::myProcNo())
            );
            procID.write();
        #};
    }
}


Example: write interpolated field. Use e.g.
    postProcess -field 'p'  

functions
{
    volPointInterpolate
    {
        // Load the library containing the 'coded' functionObject
        functionObjectLibs ("libutilityFunctionObjects.so");
        type coded;
        // Name of on-the-fly generated functionObject
        redirectType vpi;
        codeInclude
        #{
            #include "volPointInterpolation.H"
        #};
        codeWrite
        #{
            const volScalarField& p = mesh().lookupObject<volScalarField>("p");
            volPointInterpolation::New(mesh()).interpolate(p)().write();
        #};
    }
}

