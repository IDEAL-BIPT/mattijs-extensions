Dune:
- move parts of processors to other processors
- just use e.g. parMetis on the coarsened matrix

Us:
- probably move parts of processors as well
- two issues:
    - agglomeration not synchronised so more and more processor interfaces
    - also processor interface always at same processor so error always
      in the same place

- do local agglomeration first
- then decide if processor agglomeration
- re-decompose into wanted number of processors (is given?)

- to start: write test app:
- construct fvMatrix (=lduMatrix)
- add lduMatrix::distribute(const mapDistributePolyMesh&)
- optionally allow renumbering on destination
- and see if we can move lduMatrix across processors
- and solve it



Patches/interfaces:
- processor patches are special! Are local only and can be
deleted&constructed at will. The discerning feature is that they are local
only.
- so filter them out when exchanging subsets
- all other patches are present on all processors so can map themselves
  (given enough info)
- info needed is:
    - destination face numbering (preserve relative ordering)
    - destination cell numbering




Local agglomeration:
- you want to be consistent in e.g. layers so neighbouring
columns of cells get agglomerated in the same way
- so pre-sorting the cells based on face areas might actually make things
worse (compared to using original numbering). This happens on the (non-moving)
DTCHull case.
- should maybe make a layer-aware agglomeration method:
    - given patch determine patch-local numbering
    - only up to where the structuredness stops
    - so now we have 1D columns
    - agglomerate these consistently (so neighbouring columns do the same)
    - then continue doing normal agglomeration
