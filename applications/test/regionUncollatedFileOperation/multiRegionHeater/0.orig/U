/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  dev                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

topAir
{
    dimensions      [ 0 1 -1 0 0 0 0 ];

    internalField   uniform ( 0.1 0 0 );

    boundaryField
    {
        maxY
        {
            type            fixedValue;
            value           uniform ( 0 0 0 );
        }
        minX
        {
            type            fixedValue;
            value           $internalField;
        }
        maxX
        {
            type            inletOutlet;
            value           $internalField;
            inletValue      uniform ( 0 0 0 );
        }
        minZ
        {
            type            fixedValue;
            value           uniform ( 0 0 0 );
        }
        maxZ
        {
            type            fixedValue;
            value           uniform ( 0 0 0 );
        }
        "topAir_to_.*"
        {
            type            fixedValue;
            value           uniform ( 0 0 0 );
        }
    }
}

bottomWater
{
    dimensions      [ 0 1 -1 0 0 0 0 ];

    internalField   uniform ( 0.001 0 0 );

    boundaryField
    {
        minX
        {
            type            fixedValue;
            value           $internalField;
        }
        maxX
        {
            type            inletOutlet;
            value           uniform ( 0.01 0 0 );
            inletValue      uniform ( 0 0 0 );
        }
        minY
        {
            type            fixedValue;
            value           uniform ( 0 0 0 );
        }
        minZ
        {
            type            fixedValue;
            value           uniform ( 0 0 0 );
        }
        maxZ
        {
            type            fixedValue;
            value           uniform ( 0 0 0 );
        }
        "bottomWater_to_.*"
        {
            type            fixedValue;
            value           uniform ( 0 0 0 );
        }
    }
}

// Needed for decomposePar only
"(heater|leftSolid|rightSolid)"
{
    dimensions      [ 0 1 -1 0 0 0 0 ];

    internalField   uniform ( 0 0 0 );

    boundaryField
    {
        ".*"
        {
            type    zeroGradient;
        }
    }
}

// ************************************************************************* //
