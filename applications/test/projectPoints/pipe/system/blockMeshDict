/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  dev                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

geometry
{
    cylinder
    {
        type searchableCylinder;
        point1 (0 -4 0);
        point2 (0 4 0);
        radius 0.7;
    }
    cylinder3
    {
        type searchableCylinder;
        point1 (-10 0.4 0);
        point2 (10 0.4 0);
        radius 0.5;
    }
    cylinder2
    {
        type    searchableCurve;
        file    "curve.obj";
        radius  0.5;
    }
    inletPlane
    {
        type    searchablePlate;
        origin  (-4 -50 -50);
        span    (0 100 100);
    }
}

vertices
(
    // Vertical cylinder
    project (-1 -0.1 -1) (cylinder cylinder2)
    project ( 1 -0.1 -1) (cylinder)
    project ( 1  0.9 -1) (cylinder)
    project (-1  0.9 -1) (cylinder cylinder2)
    project (-1 -0.1  1) (cylinder cylinder2)
    project ( 1 -0.1  1) (cylinder)
    project ( 1  0.9  1) (cylinder)
    project (-1  0.9  1) (cylinder cylinder2)


    // Horizontal cylinder
    project (-4   0 -0.5) (cylinder2 inletPlane)
    (-0.6 0 -0.5)   //project (-0.6 0 -0.5) (cylinder cylinder2)
    (-0.6 1 -0.5)   //project (-0.6 1 -0.5) (cylinder cylinder2)
    project (-4   1 -0.5) (cylinder2 inletPlane)
    project (-4   0  0.5) (cylinder2 inletPlane)
    (-0.6 0  0.5)   //project (-0.6 0  0.5) (cylinder cylinder2)
    (-0.6 1  0.5)   //project (-0.6 1  0.5) (cylinder cylinder2)
    project (-4   1  0.5) (cylinder2 inletPlane)


    // On top of vertical cylinder
    project (-1 2 -1) (cylinder)
    project ( 1 2 -1) (cylinder)
    project ( 1 2  1) (cylinder)
    project (-1 2  1) (cylinder)

    // Below vertical cylinder
    project (-1 -1 -1) (cylinder)
    project ( 1 -1 -1) (cylinder)
    project ( 1 -1  1) (cylinder)
    project (-1 -1  1) (cylinder)
);

blocks
(
    hex (0 1 2 3 4 5 6 7) (8 8 8) simpleGrading (1 1 1)
    hex (0 3 11 8 4 7 15 12) (8 20 8) simpleGrading (1 1 1)

    hex ( 7 6 2 3 19 18 17 16) (8 8 8) simpleGrading (1 1 1)
    hex (20 23 22 21 0 4 5 1) (8 8 8) simpleGrading (1 1 1)
);

edges
(
    project 0 1 (cylinder)
    project 1 2 (cylinder)
    project 2 3 (cylinder)

    project 1 5 (cylinder)
    project 2 6 (cylinder)

    project 4 5 (cylinder)
    project 5 6 (cylinder)
    project 6 7 (cylinder)

    // Common face
    project 3 0 (cylinder cylinder2)
    project 3 7 (cylinder cylinder2)
    project 7 4 (cylinder cylinder2)
    project 0 4 (cylinder cylinder2)

    // Inlet
    project 8 12 (cylinder2 inletPlane)
    project 12 15 (cylinder2 inletPlane)
    project 15 11 (cylinder2 inletPlane)
    project 11 8 (cylinder2 inletPlane)

    // Sides of horizontal cylinder. Use projectCurve to do interpolation
    // for radial direction to keep points along edges at constant radial
    // direction.
    projectCurve  8 0 (cylinder2)
    projectCurve 11 3 (cylinder2)
    projectCurve 15 7 (cylinder2)
    projectCurve 12 4 (cylinder2)



    // Top cylinder
    project 16 19 (cylinder)
    project 19 18 (cylinder)
    project 18 17 (cylinder)
    project 17 16 (cylinder)

    // Bottom cylinder
    project 20 21 (cylinder)
    project 21 22 (cylinder)
    project 22 23 (cylinder)
    project 23 20 (cylinder)
);

faces
(
    // Common face
    project (0 4 7 3) cylinder

    project (8 0 4 12) cylinder2
    project (12 4 7 15) cylinder2
    project (15 7 3 11) cylinder2
    project (8 11 3 0) cylinder2
);


defaultPatch
{
    name walls;
    type wall;
}

boundary
(
    side
    {
        type    patch;
        faces   ((8 12 15 11));
    }

    inlet
    {
        type    patch;
        faces   ((21 22 23 20));
    }

    outlet
    {
        type    patch;
        faces   ((16 19 18 17));
    }
);

// ************************************************************************* //
