#!/bin/bash
#------------------------------------------------------------------------------
# =========                 |
# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
#  \\    /   O peration     |
#   \\  /    A nd           | Copyright (C) 2016 OpenFOAM Foundation
#    \\/     M anipulation  |
#-------------------------------------------------------------------------------
# License
#     This file is part of OpenFOAM.
#
#     OpenFOAM is free software: you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# Script
#     wmakeQueue
#
# Usage
#     wmakeQueue COMMAND
#         (start WM_NCOMPPROCS instances of daemon)
#         run 'COMMAND'
#
# Description
#     Scheduler for parallel compilations using wmake.
#
#     Sources the relevant cshrc/bashrc if not set.
#
#     WM_PROJECT_DIR, WM_PROJECT and WM_PROJECT_VERSION will have been set
#     before calling this routine.
#     FOAM_INST_DIR may possibly have been set (to find installation)
#
#-------------------------------------------------------------------------------
#set -u

usage() {
    exec 1>&2
    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
    cat<<USAGE

Usage: ${0##*/} [OPTION] <command>
options:
  -info             continuously show current jobs and servers
  -kill             kill servers; clear current jobs
  -run <server>     (used internally: spawn server)
  -help             print the usage

* Queueing scheduler for threaded compilation. Gets passed a command to
execute. This scheduler can be used in compiling OpenFOAM by setting
the WM_SCHEDULER variable. If no command gets passed it will wait until
all the scheduled commands have been executed.


Typical usage for compiling OpenFOAM:

- Make sure all lnInclude directories are uptodate:
    ./Allwmake -update

- Compile all with this scheduler:
    wmake -queue


Above commands wrap up the individual steps:
- Make sure all lnInclude directories are uptodate:
    wmakeLnIncludeAll
- Compile all 'objects' with this scheduler and wait for completion
    (export WM_SCHEDULER=$0 && wmake -all objects; WM_SCHEDULER)
- Do all linkage
    wmake -all


Operation:
It maintains two directories in ~.\$WM_PROJECT/.queue,
one of pending jobs and one of running jobs. The command that gets passed
as argument gets written as a shell script to the pending directory. The
server (this script with -run argument; \$WM_NCOMPPROCS servers automatically
started) picks up a job script from the pending/ directory, moves it to
the running/ directory and executes it. Each server will stop if there are
no more jobs in the pending/ directory.

USAGE
    exit 1
}


killServers() {
    # Try nicely
    serverLocks=`ls -1 $lockDir/${Script}_*.pid 2> /dev/null`
    for serverLock in $serverLocks
    do
        pid=`cat $serverLock 2>/dev/null` && kill -TERM "$pid"
    done
    # Cleanup
    rm $pendingDir/* 2>/dev/null
    rm $runningDir/* 2>/dev/null
    for serverLock in $serverLocks
    do
        rm -f $serverLock
    done
}


Script=${0##*/}

[ -n "$WM_PROJECT" ] || {
    echo "$Script : No OpenFOAM installed. Exiting"
    exit 1
}
[ -n "$WM_NCOMPPROCS" ] || {
    echo "$Script : Environment variable WM_NCOMPPROCS needs to be set to the" \
        "number of desired compilation servers. Exiting."
    exit 1
}

# Location of queue
lockDir=$HOME/.$WM_PROJECT/.queue
pendingDir=$lockDir/pending
runningDir=$lockDir/running
runLock=$lockDir/lock


# Make sure directories exist
mkdir -p $pendingDir
mkdir -p $runningDir



# Parse options. Handle the simple ones inline.
serverNo=''

while [ "$#" -gt 0 ]
do
    case "$1" in
    -h | -help)
        usage
        ;;
    -info)

        while true
        do
            echo "$Script : Jobs pending : `ls -1 $pendingDir | wc -l`"
            echo "$Script : Jobs running : `ls -1 $runningDir | wc -l`"
            echo "$Script : Servers      : `ps -u | grep -v grep | grep "$Script -run" | wc -l`"
            sleep 1
            tput cuu1 && tput el && tput el1
            tput cuu1 && tput el && tput el1
            tput cuu1 && tput el && tput el1
        done
        exit 0
        ;;
    -kill)

        echo "$Script : Jobs pending : `ls -1 $pendingDir | wc -l`"
        echo "$Script : Jobs running : `ls -1 $runningDir | wc -l`"
        echo "$Script : Servers      : `ps -u | grep -v grep | grep "$Script -run" | wc -l`"
        echo "$Script : Killing servers"

        # Kill servers nicely
        killServers

        sleep 5

        # Try not so nicely - also kills script itself
        killall -TERM ${Script}
        exit 0
        ;;
    -run)
        [ "$#" -ge 2 ] || usage "'$1' option requires an argument"
        serverNo=$2
        shift 2
        ;;
    -*)
        usage "unknown option: '$*'"
        break
        ;;
    *)
        break
        ;;
    esac
done



if [ -n "$serverNo" ]
then

    # Run mode

    serverLock=$lockDir/${Script}_${serverNo}.pid

    # Clean up on termination and on Ctrl-C
    trap 'rm -f $runLock $serverLock 2>/dev/null; exit 0' EXIT TERM INT

    found=true

    while true
    do

        # Check that I am who I think I am
        pid=`cat $serverLock 2> /dev/null`
        if [ "$pid" -a "$pid" != $$ ]
        then
            echo "$Script : Server $serverNo, pid $$ exiting since duplicate"
            trap - EXIT TERM INT
            rm -f $runLock
            exit 0
        fi


        #- Check if any pending job
        lockfile $runLock
	    job=`ls -1tr $pendingDir | head -1`
        if [ "$job" ]
        then
            mv $pendingDir/$job $runningDir
        fi
        rm -f $runLock

        #- Execute job
        if [ "$job" ]
        then
            #echo "$Script : Server $serverNo found job $job"
            found=true
            sh $runningDir/$job
            rm $runningDir/$job # Note: could make removal dependent on success
        else
            if [ "$found" = "false" ]
            then
                echo "$Script : Server $serverNo exiting since no pending jobs"
                exit 0
            else

                # No job. Sleep a bit and then if still no jobs exit.
                #echo "$Script : Server $serverNo : no jobs found." \
                #    " Sleeping and retesting"
                sleep 10
                found=false
            fi
        fi

    done

elif [ $# -eq 0 ]
then

    # Wait for finishing
    echo "$Script : Jobs pending : `ls -1 $pendingDir | wc -l`"
    echo "$Script : Jobs running : `ls -1 $runningDir | wc -l`"
    echo "$Script : Servers      : `ps -u | grep -v grep | grep "$Script -run" | wc -l`"

    echo "$Script : Waiting for servers to finish"
    while true
    do
        serverLocks=`ls -1 $lockDir/${Script}_*.pid 2> /dev/null`

        [ "$serverLocks" ] || exit 0

        for serverLock in $serverLocks
        do
            pid=`cat $serverLock 2> /dev/null` && (kill -0 "$pid" || rm -f $serverLock)
        done
    done

else

    trap killServers TERM INT


    # Start instances of running script
    for serverNo in `seq 1 $WM_NCOMPPROCS`
    do
        serverLock=$lockDir/${Script}_${serverNo}.pid

        #echo "$Script : Checking server lock file $serverLock"
        if lockfile -r0 $serverLock 2>/dev/null
        then
            $0 -run $serverNo </dev/null &
            pid=$!
            echo "$Script : Started server $serverNo with $pid, lock $serverLock"
            chmod +w $serverLock && echo "$pid" > $serverLock && chmod -w $serverLock

            # Force creation of single server only to avoid too many being
            # started.
            break
        else
            # Already running? Check if still running and release lock if not
            pid=`cat $serverLock 2>/dev/null` && (kill -0 "$pid" || rm -f $serverLock)
        fi
    done


    #echo "*** pid:$$ ppid:$PPID"


    # Where to source WM_PROJECT settings in a remote shell
    # This code tries to figure out which cshrc or bashrc to execute.
    # !! Assumes remote computer running same shell and startup files
    # in same location

    sourceFoam=false    # Fallback command
    case $SHELL in
    */csh | */tcsh )    # [t]csh vs bash|ksh|sh
        shellRc=cshrc
        ;;
    *)
        shellRc=bashrc
        ;;
    esac

    # Check ~/.$WM_PROJECT/$WM_PROJECT_VERSION/
    # Check ~/.$WM_PROJECT/
    # Check <installedProject>/etc/
    if [ "$WM_PROJECT" ]
    then
        for i in \
            $HOME/.$WM_PROJECT/$WM_PROJECT_VERSION \
            $HOME/.$WM_PROJECT \
            $WM_PROJECT_DIR/etc \
            ;
        do
            if [ -f "$i/$shellRc" ]
            then
                sourceFoam="$i/$shellRc"
                break
            fi
        done
    fi

    # Construct test string for remote execution.
    # Source WM_PROJECT settings if WM_PROJECT environment not set.
    # Attempt to preserve the installation directory 'FOAM_INST_DIR'
    # Use FOAM_SETTINGS to pass command-line settings
    case $sourceFoam in
    */bashrc)
        if [ "$FOAM_INST_DIR" ]
        then
            sourceFoam='[ "$WM_PROJECT" ] || '"FOAM_INST_DIR=$FOAM_INST_DIR . $sourceFoam $FOAM_SETTINGS"
        else
            sourceFoam='[ "$WM_PROJECT" ] || '". $sourceFoam $FOAM_SETTINGS"
        fi
        ;;

    */cshrc)
        # TODO: csh equivalent to bash code (preserving FOAM_INST_DIR)
        sourceFoam='if ( ! $?WM_PROJECT ) source '"$sourceFoam $FOAM_SETTINGS"
        ;;
    esac

    # Quote double-quotes for remote command line
    rcmd=$(echo $* | sed -e s/\"/\'\"\'/g)
    # The same, without forking (not ksh, maybe not /bin/sh either)
    # rcmd=$(while [ "$#" -gt 0 ]; do echo "${1//\"/'\"'}"; shift; done)

    #echo "Writing script $pendingDir/$$ with $rcmd"
    #lockfile $runLock
    file="$pendingDir/$$_${RANDOM}"
    echo "$sourceFoam 2>/dev/null; cd $PWD && echo \"$rcmd\" && $rcmd" > "$file"
    #rm -f $runLock

fi

#------------------------------------------------------------------------------
